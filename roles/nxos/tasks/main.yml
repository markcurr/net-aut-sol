---

- name: enable NXAPI
  nxos_config:
    lines:
      - 'feature nxapi'
    provider: "{{ nxos_provider }}"
    transport: cli


  #check features enabled
- name: enable shared nxos features
  nxos_feature:
    state: enabled
    feature: "{{ item }}"
    provider: "{{ nxos_provider }}"
  with_list: "{{ features }}"
  
- name: set interface to L3 and admin up
  nxos_interface:
   admin_state: up
   interface: "{{ item.key }}"
   mode: layer3
   state: present
   provider: "{{ nxos_provider }}"
  with_dict: "{{ interfaces }}"
 
- name: configure interface IP
  nxos_ip_interface:
   interface: "{{ item.key }}"
   addr: "{{ item.value.ip }}"
   mask: "{{ item.value.mask }}"
   provider: "{{ nxos_provider }}"
  with_dict: "{{ interfaces }}"


- name: configure ospf domain 1
  nxos_ospf:
    state: present
    ospf: 1
    provider: "{{ nxos_provider }}"

- name: configure ospf interface
  nxos_interface_ospf:
    area: 0
    provider: "{{ nxos_provider }}"
    interface: "{{ item.key }}"
    ospf: 1
    state: present
  with_dict: "{{ interfaces }}"

- name: create overlay VRF
  nxos_vrf:
    vrf: overlay
    state: present
  
- name: configure BGP
  nxos_bgp: 
    router_id: "{{ item.value.loopback }}"
    asn: 65535
  with_dict: "{{ evpn_loopbacks }}"
  when: "item.key  ==  inventory_hostname"
  
- name: configure ipv4 address-family to advertise evpn
  nxos_bgp_af:
    asn: 65535
    afi: ipv4
    safi: unicast
    vrf: overlay
    advertise_l2vpn_evpn: true
  

- name: configure BGP neighbors
  nxos_bgp_neighbor:
    asn: 65535
    neighbor: "{{ item.value.loopback }}"
    remote_as: 65535
    update_source: Loopback0
  with_dict: "{{ evpn_loopbacks }}"
  when: "item.key  !=  inventory_hostname"
  
- name: configure BGP neighbors evpn AF
  nxos_bgp_neighbor_af:
    asn: 65535
    neighbor: "{{ item.value.loopback }}"
    afi: l2vpn
    safi: evpn
  with_dict: "{{ evpn_loopbacks }}"
  when: "item.key  !=  inventory_hostname"